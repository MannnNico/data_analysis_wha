import os
import re
import pandas as pd
from openpyxl import load_workbook
from openpyxl.styles import Alignment

# Datei-Pfad zur bestehenden Tabelle, die beschrieben werden soll
existing_file_path = "/Users/nico/Desktop/WHA/Daten/BGA_all_var_timestemps.xlsx"
sheet_name_insert = "Tabelle1"

# Ordner mit den Excel-Dateien
input_folder = "/Users/nico/Desktop/WHA/Daten/BGA_full"

# Mappings f√ºr die Variablennamen in den Dateien
variable_mapping = {
    "pH": "pH",
    "lac": "Lac (mmol/L)",
    "HCO3": "HCO3- (mmol/L)",
    "pCO2": "pCO2 (mmHg)"
}

# Liste der relevanten Excel-Dateien (nur CONST oder OSZ im Namen)
dateien = [f for f in os.listdir(input_folder) if f.lower().endswith(".xlsx") and ("CONST" in f or "OSZ" in f)]

# Bestehende Tabelle laden
df_existing = pd.read_excel(existing_file_path, sheet_name=sheet_name_insert, engine="openpyxl")

# Listen zur Fehlerprotokollierung
fehlende_werte = []
ge√§nderte_werte = []


# Funktion zur Konvertierung von Werten in Zahlen
def convert_to_number(value):
    if isinstance(value, str):
        try:
            return float(value.replace(",", "."))  # Ersetzt Komma durch Punkt, falls notwendig
        except ValueError:
            return None
    return value if isinstance(value, (int, float)) else None


# Verarbeiten aller Dateien
for file in dateien:
    file_path = os.path.join(input_folder, file)
    file_base_name = os.path.splitext(file)[0]  # Dateiname ohne .xlsx

    try:
        print(f"\nüîç Verarbeite Datei: {file}")
        xls = pd.ExcelFile(file_path, engine="openpyxl")

        # Identifikation der Probanden-ID und Testart aus dem Dateinamen
        match = re.search(r'TTE(\d{3})_([A-Za-z]+\d+)', file_base_name)
        if match:
            proband_id = int(match.group(1))
            testart_match = match.group(2).replace("CONST_", "CONST").replace("OSZ_", "OSZ")
        else:
            print(f"‚ö†Ô∏è Keine g√ºltige ID oder Testart im Dateinamen: {file_base_name} gefunden!")
            continue

        if proband_id not in df_existing["ID"].values:
            print(f"‚ö†Ô∏è Proband-ID {proband_id} nicht in bestehender Tabelle gefunden!")
            continue

        for sheet_name in xls.sheet_names:
            df = pd.read_excel(xls, sheet_name=sheet_name, header=0)
            df.columns = [str(col).strip() for col in df.columns]

            # Iteration √ºber die Spalten der bestehenden Tabelle
            for existing_col in df_existing.columns:
                if "_" not in existing_col:
                    continue  # √úberspringe nicht formatierte Spalten

                parts = existing_col.split("_")
                if len(parts) < 3:
                    continue  # Sicherstellen, dass das Spaltenformat passt

                header_testart, header_variable, header_zeitpunkt = parts[0], parts[1], parts[2]

                if header_testart != testart_match:
                    continue  # Testart stimmt nicht √ºberein

                if header_variable not in variable_mapping:
                    continue  # Variable unbekannt

                var_column = variable_mapping[header_variable]

                if var_column not in df.columns:
                    print(f"‚ö†Ô∏è Spalte {var_column} nicht in {file}, Sheet {sheet_name} gefunden!")
                    fehlende_werte.append(f"{existing_col} (Datei: {file}, Sheet: {sheet_name})")
                    continue

                zeitpunkt_index = int(header_zeitpunkt)
                if zeitpunkt_index >= len(df):
                    print(f"‚ö†Ô∏è Kein g√ºltiger Zeitwert f√ºr {existing_col} in {file}, Sheet {sheet_name}!")
                    fehlende_werte.append(f"{existing_col} (Datei: {file}, Sheet: {sheet_name})")
                    continue

                value = convert_to_number(df[var_column].iloc[zeitpunkt_index])

                if value is not None:
                    current_value = df_existing.loc[df_existing["ID"] == proband_id, existing_col].values[0]

                    if pd.notna(current_value):  # Pr√ºfen, ob bereits ein Wert existiert
                        if current_value != value:
                            print(
                                f"‚ö†Ô∏è Wert {current_value} in {existing_col} stimmt nicht √ºberein! Wird durch {value} ersetzt.")
                            df_existing.loc[df_existing["ID"] == proband_id, existing_col] = value
                            ge√§nderte_werte.append(f"{existing_col} (alt: {current_value}, neu: {value})")
                    else:
                        df_existing.loc[df_existing["ID"] == proband_id, existing_col] = value

                    print(f"‚úÖ Wert f√ºr {existing_col} in ID {proband_id} eingetragen: {value}")

    except Exception as e:
        print(f"‚ùå Fehler beim Einlesen von {file}: {e}")

# Ergebnisse speichern
with pd.ExcelWriter(existing_file_path, engine="openpyxl", mode="w") as writer:
    df_existing.to_excel(writer, sheet_name=sheet_name_insert, index=False)

# Zahlenformat und Rechtsb√ºndigkeit setzen
wb = load_workbook(existing_file_path)
ws = wb[sheet_name_insert]

for row in ws.iter_rows(min_row=2, min_col=2):  # Ab der zweiten Zeile, zweite Spalte
    for cell in row:
        if isinstance(cell.value, (int, float)):
            cell.alignment = Alignment(horizontal="right")

wb.save(existing_file_path)

# Zusammenfassung der fehlenden und ge√§nderten Werte ausgeben
print("\nüîç Zusammenfassung der offenen Punkte:")
if fehlende_werte:
    print("‚ö†Ô∏è Fehlende Werte:")
    for item in fehlende_werte:
        print(f"   - {item}")
else:
    print("‚úÖ Keine fehlenden Werte gefunden.")

if ge√§nderte_werte:
    print("‚ö†Ô∏è Ge√§nderte Werte:")
    for item in ge√§nderte_werte:
        print(f"   - {item}")
else:
    print("‚úÖ Keine Werte wurden √ºberschrieben.")

print(f"\n‚úÖ Bestehende Tabelle aktualisiert und Zahlen rechtsb√ºndig formatiert: {existing_file_path}")
